{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\firnaz\\\\OneDrive\\\\Documents\\\\NEXT_PROJECT\\\\learn-nextjs\\\\meetup-app\\\\pages\\\\index.js\";\n// client side\nimport MeetUpList from \"../components/meetups/MeetupList\";\nimport Head from 'next/head'; // server side\n\nfunction HomePage(props) {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetup Next.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"desc\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetUpList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // both getServerSideProps and getStaticProps can be async\n// code wont be run in client side, only on server\n// makes it best for authentication key or other purposes that clients side dont need to see\n// // better for data that changes frequently or change multiple time every request\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   console.log(req, res);\n//   // fetch data from api\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS\n//     }\n//   }\n// }\n// Static Site Generator (SSG)\n// Server Side Rendering (SSR)\n// faster can define revalidate when to request\n\n\n_c = HomePage;\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/firnaz/OneDrive/Documents/NEXT_PROJECT/learn-nextjs/meetup-app/pages/index.js"],"names":["MeetUpList","Head","HomePage","props","console","log","meetups"],"mappings":";;;AAAA;AACA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CACA;;AAIA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACG;AAA3B;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AASD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;KAhCSJ,Q;;AAsDT,eAAeA,QAAf","sourcesContent":["// client side\r\nimport MeetUpList from \"../components/meetups/MeetupList\";\r\nimport Head from 'next/head'\r\n// server side\r\nimport { getMongoURL } from './constant';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nfunction HomePage(props) {\r\n  console.log(props);\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>React Meetup Next.js</title>\r\n        <desc></desc>\r\n      </Head>\r\n      <MeetUpList meetups={props.meetups} />\r\n    </>\r\n  )\r\n}\r\n\r\n// both getServerSideProps and getStaticProps can be async\r\n// code wont be run in client side, only on server\r\n// makes it best for authentication key or other purposes that clients side dont need to see\r\n\r\n// // better for data that changes frequently or change multiple time every request\r\n// export async function getServerSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n//   console.log(req, res);\r\n//   // fetch data from api\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS\r\n//     }\r\n//   }\r\n// }\r\n\r\n// Static Site Generator (SSG)\r\n// Server Side Rendering (SSR)\r\n// faster can define revalidate when to request\r\nexport async function getStaticProps() {\r\n  // fetch GET here\r\n  const URL = getMongoURL()\r\n  const client = await MongoClient.connect(URL)\r\n  const db = client.db()\r\n  const meetupsCollection = db.collection('meetups');\r\n  const meetups = await meetupsCollection.find().toArray();\r\n  client.close();\r\n  return {\r\n    props: {\r\n      meetups: meetups.map(item => ({\r\n        title: item.title,\r\n        address: item.address,\r\n        image: item.image,\r\n        id: item._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}